//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_Title;
class Map1_Identifier;
class Map1_Name;
class Map1_Size;
class Map1_Hash;
class Map1_LastSep;
class Map1_OK;
class Map1_Error;
class Map1_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
    virtual void Special1(AppClassContext& context);
    virtual void Special2(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_Title Title;
    static Map1_Identifier Identifier;
    static Map1_Name Name;
    static Map1_Size Size;
    static Map1_Hash Hash;
    static Map1_LastSep LastSep;
    static Map1_OK OK;
    static Map1_Error Error;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void Unknown(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void CharFull(AppClassContext& context);
    virtual void Special1(AppClassContext& context);
    virtual void Special2(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
};

class Map1_Title :
    public Map1_Default
{
public:
    Map1_Title(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
    virtual void Special1(AppClassContext& context);
};

class Map1_Identifier :
    public Map1_Default
{
public:
    Map1_Identifier(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
};

class Map1_Name :
    public Map1_Default
{
public:
    Map1_Name(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
    virtual void Special2(AppClassContext& context);
};

class Map1_Size :
    public Map1_Default
{
public:
    Map1_Size(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
};

class Map1_Hash :
    public Map1_Default
{
public:
    Map1_Hash(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
};

class Map1_LastSep :
    public Map1_Default
{
public:
    Map1_LastSep(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Special1(AppClassContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void CharFull(AppClassContext& context);
    virtual void Digit(AppClassContext& context);
    virtual void Separator(AppClassContext& context);
    virtual void Special1(AppClassContext& context);
    virtual void Special2(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void CharFull()
    {
        getState().CharFull(*this);
    };

    inline void Digit()
    {
        getState().Digit(*this);
    };

    inline void Separator()
    {
        getState().Separator(*this);
    };

    inline void Special1()
    {
        getState().Special1(*this);
    };

    inline void Special2()
    {
        getState().Special2(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
