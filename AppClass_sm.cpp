//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#include "AppClass.hpp"
#include "AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Title Map1::Title("Map1::Title", 1);
Map1_Identifier Map1::Identifier("Map1::Identifier", 2);
Map1_Name Map1::Name("Map1::Name", 3);
Map1_Size Map1::Size("Map1::Size", 4);
Map1_Hash Map1::Hash("Map1::Hash", 5);
Map1_LastSep Map1::LastSep("Map1::LastSep", 6);
Map1_OK Map1::OK("Map1::OK", 7);
Map1_Error Map1::Error("Map1::Error", 8);

void AppClassState::CharFull(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Digit(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Separator(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Special1(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Special2(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void Map1_Default::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::Digit(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::CharFull(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::Special1(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::Special2(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::Separator(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Start::CharFull(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Title);
    }
    catch (...)
    {
        context.setState(Map1::Title);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Start::Digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Title);
    }
    catch (...)
    {
        context.setState(Map1::Title);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Title::CharFull(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Title);
    }
    catch (...)
    {
        context.setState(Map1::Title);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Title::Digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Title);
    }
    catch (...)
    {
        context.setState(Map1::Title);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Title::Separator(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.CheckTitle())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Identifier);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Separator(context);
    }


}

void Map1_Title::Special1(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Title);
    }
    catch (...)
    {
        context.setState(Map1::Title);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Identifier::CharFull(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Identifier);
    }
    catch (...)
    {
        context.setState(Map1::Identifier);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Identifier::Digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Identifier);
    }
    catch (...)
    {
        context.setState(Map1::Identifier);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Identifier::Separator(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.CheckIdentifier())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Name);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Separator(context);
    }


}

void Map1_Name::CharFull(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Name);
    }
    catch (...)
    {
        context.setState(Map1::Name);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Name::Separator(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.checkName())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Size);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Separator(context);
    }


}

void Map1_Name::Special2(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Name);
    }
    catch (...)
    {
        context.setState(Map1::Name);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Size::Digit(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Size);
    context.getState().Entry(context);


}

void Map1_Size::Separator(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Hash);
    context.getState().Entry(context);


}

void Map1_Hash::CharFull(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.IsCharShortcut())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.AddToBuff();
            context.setState(Map1::Hash);
        }
        catch (...)
        {
            context.setState(Map1::Hash);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::CharFull(context);
    }


}

void Map1_Hash::Digit(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.AddToBuff();
        context.setState(Map1::Hash);
    }
    catch (...)
    {
        context.setState(Map1::Hash);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Hash::Separator(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.CheckHash())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::LastSep);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Separator(context);
    }


}

void Map1_LastSep::Special1(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (ctxt.isBackslash())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Acceptable();
            context.setState(Map1::OK);
        }
        catch (...)
        {
            context.setState(Map1::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(Map1::Error);
        }
        catch (...)
        {
            context.setState(Map1::Error);
            throw;
        }
        context.getState().Entry(context);
    }

}

void Map1_Error::CharFull(AppClassContext& context)
{



}

void Map1_Error::Digit(AppClassContext& context)
{



}

void Map1_Error::Separator(AppClassContext& context)
{



}

void Map1_Error::Special1(AppClassContext& context)
{



}

void Map1_Error::Special2(AppClassContext& context)
{



}

void Map1_Error::Unknown(AppClassContext& context)
{



}

//
// Local variables:
//  buffer-read-only: t
// End:
//
